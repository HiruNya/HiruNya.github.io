var searchIndex = {};
searchIndex["gobu"] = {"doc":"A crate for creating Visual Novels.","items":[[3,"GameBuilder","gobu","The struct that is used to build a [`Game`] struct.",null,null],[3,"Rect","","Represents a rectangle",null,null],[0,"game","","The module which uses all the other modules to make a game.",null,null],[3,"Game","gobu::game","The game",null,null],[12,"size","","The rectangle that represents the game window",0,null],[12,"ui","","The UI component which manages the textbox(s)",0,null],[12,"background","","The background of the game",0,null],[12,"backgrounds","","A HashMap of all the backgrounds that the background can be set to",0,null],[12,"stage","","A HashMap of all the characters on the screen / in the world",0,null],[12,"characters","","A HashMap of all the characters that are or can be put onto the stage",0,null],[12,"story","","Holds a collection of all the scripts and also the current script",0,null],[12,"grid","","A grid that allows you to set the position without having to bother with the actual height and width of the screen",0,null],[12,"input","","Holds all the possible inputs for the game and what events they produce",0,null],[12,"music","","The music that is played in the game. (This is optional)",0,null],[11,"new","","Create a new Game struct by providing the [width, height] of the screen.",0,null],[11,"handle_event","","Handles a piston event. Currently only going forward in the story is supported.",0,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"draw","","Draws all the components of the game onto the screen",0,{"inputs":[{"name":"self"},{"name":"context"},{"name":"g2d"},{"name":"glyphs"}],"output":null}],[11,"add_character","","Add a [`Character`] to the HashMap of characters",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"character"}],"output":null}],[11,"add_background","","Add a texture to the HashMap of backgrounds",0,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["g2dtexture"],"name":"arc"}],"output":null}],[11,"add_to_stage","","Add a character to the stage using the `character` argument as the key to the characters HashMap and the `name` argument is the name of the [`CharacterEntity`] That is spawned.",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"set_background","","Set the background using the `name` argument as the key to its texture found in the backgrounds HashMap.",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"change_entity_state","","Change the state of a [`CharacterEntity`] on the stage. Returns True if the entity is changed.",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"move_character","","Move a [`CharacterEntity`]'s position on the screen. (The position is relative to the grid you've specified).",0,{"inputs":[{"name":"self"},{"name":"string"},{"name":"pos"}],"output":null}],[11,"apply_grid","","Apply a grid to the game to make it easier to position characters. W is how many cells make up the width of the screen and h is how many cells make up the height of the cell.",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"set_textbox","","Set the main textbox of the game.",0,{"inputs":[{"name":"self"},{"name":"textbox"}],"output":null}],[11,"set_speaker_box","","Set the speaker box which is the textbox that holds the name of the current speaker. Is not shown by default.",0,{"inputs":[{"name":"self"},{"name":"textbox"}],"output":null}],[11,"enable_music","","Enables playing music in the game and returns a mutable reference in a result to the newly created [`Music`] struct that can be used to play music. `rust, no_run if let Ok(music) = game.enable_music() { music.add_music_from_file(\"gabriel\", \"C:\\\\Users\\\\Hiruna\\\\Music\\\\Songs\\\\01. ガヴリールドロップキック.flac\") .expect(\"Error in loading the music!\"); music.set_music(\"gabriel\"); }`",0,{"inputs":[{"name":"self"}],"output":{"generics":["music","musicerror"],"name":"result"}}],[11,"load_characters_from_file","","Load characters from a TOML file.",0,{"inputs":[{"name":"self"},{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_characters_from_str","","Load characters from a [`&str`]. Use this if you intend on compiling the TOML file and not keep it externally. Also could be used to load characters after decrypting a file.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"gfxfactory"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_input_from_file","","Load input from a TOML file.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_input_from_str","","Load input from a [`&str`]. Use this if you intend on compiling the TOML file and not keep it externally. Also could be used to load characters after decrypting a file.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_gui_from_file","","Load the GUI from a TOML file.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_gui_from_str","","Load the GUI from a [`&str`]. Use this if you intend on compiling the TOML file and not keep it externally. Also could be used to load characters after decrypting a file.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_backgrounds_from_file","","Load the backgrounds from a TOML file.",0,{"inputs":[{"name":"self"},{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_backgrounds_from_str","","Load the backgrounds from a [`&str`]. Use this if you intend on compiling the TOML file and not keep it externally. Also could be used to load characters after decrypting a file.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"gfxfactory"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_scripts_from_file","","Load the scripts from a TOML file.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["scriptconfigimporterror"],"name":"result"}}],[11,"load_scripts_from_str","","Load scripts from a [`&str`]. Use this if you intend on compiling the TOML file and not keep it externally. Also could be used to load characters after decrypting a file.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["scriptconfigimporterror"],"name":"result"}}],[0,"gui","gobu","Manages the UI, which consists of only the textbox for now.",null,null],[3,"Grid","gobu::gui","A grid that consists of a certain number of a cells.",null,null],[12,"cells","","The number of cells that make the width and height of the grid.",1,null],[12,"pos","","The position of the Top-Left corner of the grid in the game.",1,null],[3,"Ui","","A struct that manages all the textboxes.",null,null],[12,"textbox","","The main textbox that displays the text.",2,null],[12,"speaker_box","","The textbox that displays the name of the speaker. If `None` then nothing will be shown.",2,null],[0,"textbox","","A module that lets you build and manage the textboxes shown in the game.",null,null],[3,"TextBox","gobu::gui::textbox","A struct that represents and draws a textbox",null,null],[12,"rect","","The rectangle which holds the x and y co-ordinates and the width and the height.",3,null],[12,"inner","","The inner rectangle after applying padding. This is where the text will start.",3,null],[12,"outer","","The outer rectangle which is what the square is drawn using.",3,null],[12,"text_pos","","The y position of the text.",3,null],[12,"padding","","The padding applied on the textbox.",3,null],[12,"text_changed","","Whether the text has been changed or not.",3,null],[12,"text_primitive","","The Piston text primitive that is used.",3,null],[12,"font_size","","The font size that is used with the Piston text primitive.",3,null],[12,"text_v","","The text that is to be displayed. One item of the Vec is a line.",3,null],[12,"line_gap","","The gap between the lines.",3,null],[3,"TextBoxBuilder","","A builder struct that helps build a [`TextBox`].",null,null],[4,"Padding","","The padding of the textbox.",null,null],[13,"All","","Padding equally all around.",4,null],[13,"Hv","","(Horizontal, Vertical)",4,null],[13,"Tblr","","(Top, Bottom, Left, Right)",4,null],[13,"None","","No padding",4,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"textbox"}}],[11,"new","","Create a new [`TextBox`] struct.",3,{"inputs":[{"name":"rect"}],"output":{"name":"textbox"}}],[11,"set_text","","Sets the text that is shown by the textbox.",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"draw","","Draw the textbox.",3,{"inputs":[{"name":"self"},{"name":"context"},{"name":"g2d"},{"name":"glyphs"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"textboxbuilder"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new [`TextBoxBuilder`].",5,{"inputs":[],"output":{"name":"textboxbuilder"}}],[11,"build","","Builds the [`TextBox`].",5,{"inputs":[{"name":"self"},{"name":"game"}],"output":{"name":"textbox"}}],[11,"with_colour","","The colourr of the rectangle.",5,null],[11,"with_text_colour","","The colour of the text.",5,null],[11,"with_font_size","","The size of the text.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_rectangle","","The rectangle dimensions of the textbox.",5,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"self"}}],[11,"with_padding","","The padding of the textbox.",5,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"self"}}],[11,"with_line_gap","","The gap between the lines of the text.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","gobu::gui","Create a new [`Grid`] struct.",1,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"rect"}],"output":{"name":"grid"}}],[11,"get_abs_rect","","Turn the rectangle with values of the grid to a rectangle with values in pixels.",1,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"get_pos","","Turn a position with values of the grid to a position with values in pixels.",1,{"inputs":[{"name":"self"},{"name":"pos"}],"output":{"name":"pos"}}],[11,"new","","Creates a new [`Ui`] struct.",2,{"inputs":[{"name":"rect"}],"output":{"name":"ui"}}],[11,"draw","","Draws the components that the Ui contains.",2,{"inputs":[{"name":"self"},{"name":"context"},{"name":"g2d"},{"name":"glyphs"}],"output":null}],[0,"images","gobu","Deals with displaying the background image",null,null],[3,"BackgroundImage","gobu::images","The background image that is shown behind all the characters in the game.",null,null],[11,"new","","Create a new background image.",6,{"inputs":[{"name":"rect"}],"output":{"name":"backgroundimage"}}],[11,"set_texture","","Sets the texture of the background.",6,{"inputs":[{"name":"self"},{"generics":["g2dtexture"],"name":"arc"}],"output":null}],[11,"clear_texture","","Clears the background.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"draw","","Draws the background onto the screen.",6,{"inputs":[{"name":"self"},{"name":"context"},{"name":"g2d"}],"output":null}],[11,"resize","","Resizes the background image to the size of the rectangle.",6,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[0,"character","gobu","Use both [`Character`]s and [`CharacterEntity`]s to display people or objects.",null,null],[3,"CharacterEntity","gobu::character","The entity of a character that is spawned into the stage.",null,null],[12,"image","","The Image primitive provided by the Piston libraries.",7,null],[12,"texture","","The current texture being used to draw the character.",7,null],[12,"rect","","The position and size of the character image.",7,null],[12,"visible","","Whether the character is visible on screen or not.",7,null],[12,"name","","The name of the entity.",7,null],[12,"offset","","The offset of the images so that a specific point on the image can be used as the centre. Set to (0, 0) by default.",7,null],[3,"Character","","A character that is used to spawn an entity onto the stage.",null,null],[12,"default","","The default state that the entity will have upon being spawned.",8,null],[12,"state_map","","A collection of all the different states and their corresponding textures.",8,null],[12,"size","","The size of the images [Width, Height]",8,null],[12,"offset","","The offset (in percentage) of the centre of the images. This is helpful when you want to move the entity. x = 0., y = 0. : Top-Left corner x = 0.5, y = 0.5 : Centre of the image",8,null],[11,"set_visible","","Sets the visibility of the character on screen.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_texture","","Sets the texture of the character.",7,{"inputs":[{"name":"self"},{"generics":["g2dtexture"],"name":"arc"}],"output":null}],[11,"set_pos","","Sets the position of the character. This accounts for the offset.",7,{"inputs":[{"name":"self"},{"name":"pos"}],"output":null}],[11,"draw","","Draws the character onto the screen.",7,{"inputs":[{"name":"self"},{"name":"context"},{"name":"g2d"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"character"}}],[11,"new","","Create a new character where `texture` is the default texture that is to be used and `default` is the name of the default texture.",8,null],[11,"spawn","","Spawns an entity of the character onto stage with the given `name`.",8,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["characterentity"],"name":"option"}}],[11,"add_state","","Adds a state to the character. This can be something like \"sad\" or \"happy\"",8,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["g2dtexture"],"name":"arc"}],"output":null}],[11,"set_offset","","Sets the offset of the character. This is (0, 0) by default.",8,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[0,"script","gobu","Manages the story of the VN and also parsing script files.",null,null],[3,"Script","gobu::script","The struct in charge of the story in the VN and also in charge of parsing everything.",null,null],[12,"script","","The current script that is being used.",9,null],[12,"scripts","","A collection of all the scripts that can be used.",9,null],[12,"index","","The current index of what script is being used and what anchor is being used.",9,null],[4,"ScriptStep","","Represents an action dictated by the script",null,null],[13,"Dialogue","","A dialogue that consists of the name of the speaker and the text. (Name, Text)",10,null],[13,"DialogueContinue","","Only changes the text in the textbox. Doesn't change the speaker.",10,null],[13,"Show","","Shows an entity on the screen and if the state is not `None` will change that entity's state to the state named. (Entity, Some(State))",10,null],[13,"Hide","","Hides an entity using its name",10,null],[13,"Spawn","","Spawns a character with a specific entity name and also possibly a position. (CharacterName, Some(EntityName), Some(Position))",10,null],[13,"Kill","","Kill an entity",10,null],[13,"Move","","Move an entity to a specific position",10,null],[13,"Stage","","Set the background",10,null],[13,"GoTo","","Go to a specific script or part of a script (ScriptName, AnchorName)",10,null],[13,"Play","","Play music",10,null],[13,"End","","End of the script/game",10,null],[0,"parser","","Parses script files and turns them into [`ScriptStep`]s",null,null],[5,"translate","gobu::script::parser","Translates a [`str`] into a [`Vec`] of [`ScriptSteps`]. Returns an error if it fails.",null,{"inputs":[{"name":"str"}],"output":{"generics":["indexmap","scriptimporterror"],"name":"result"}}],[11,"fmt","gobu::script","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"scriptstep"}}],[11,"new","","Create a new [`Script`] struct.",9,{"inputs":[],"output":{"name":"script"}}],[11,"set_script","","Set a script with its name and maybe its anchor.",9,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["string"],"name":"option"}],"output":null}],[11,"next_script","","Go to the next script.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"load_script","","Load a script into the collection of scripts.",9,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["string","vec"],"name":"indexmap"}],"output":null}],[11,"load_scripts","","Load a number of scripts into the collection of scripts.",9,{"inputs":[{"name":"self"},{"generics":["string","indexmap"],"name":"indexmap"}],"output":null}],[11,"load_from_str","","Load scripts from a [`&str`].",9,{"inputs":[{"name":"self"},{"name":"string"},{"name":"str"}],"output":{"generics":["scriptimporterror"],"name":"result"}}],[11,"load_from_file","","Load scripts from an external file.",9,{"inputs":[{"name":"self"},{"name":"string"},{"name":"p"}],"output":{"generics":["scriptimporterror"],"name":"result"}}],[11,"next_step","gobu::game","Load the next step of the script and execute the step.",0,{"inputs":[{"name":"self"}],"output":null}],[0,"util","gobu","A variety of utility functions that make life easier.",null,null],[3,"GameBuilder","gobu::util","The struct that is used to build a [`Game`] struct.",null,null],[4,"ExtFile","","Represents an external file OR a [`String`].",null,null],[13,"Path","","Represents a path to an external file that can be read.",11,null],[13,"Str","","A String that acts as a TOML file.",11,null],[5,"load_characters_from_file","","Load the characters from a TOML file",null,{"inputs":[{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_input_from_file","","Load the inputs from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["gameinput","configimporterror"],"name":"result"}}],[5,"load_gui_from_file","","Load the GUI from a TOML file",null,{"inputs":[{"name":"p"},{"name":"game"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_backgrounds_from_file","","Load the backgrounds from a TOML file",null,{"inputs":[{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_scripts_from_file","","Load the scripts from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["scriptsfromfile","scriptconfigimporterror"],"name":"result"}}],[5,"load_music_from_file","","Load music from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[0,"load","","Helpful functions that load assets from a TOML file.",null,null],[3,"ScriptsFromFile","gobu::util::load","The scripts that are loaded from the file before they are turned into a [`Character`] struct.",null,null],[12,"default","","The default script",12,null],[12,"map","","A map of all the scripts",12,null],[5,"load_characters_from_file","","Load the characters from a TOML file",null,{"inputs":[{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_characters_from_str","","Load the characters from a TOML str",null,{"inputs":[{"name":"str"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_input_from_file","","Load the inputs from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["gameinput","configimporterror"],"name":"result"}}],[5,"load_input_from_str","","Load the inputs from a TOML str",null,{"inputs":[{"name":"str"}],"output":{"generics":["gameinput","configimporterror"],"name":"result"}}],[5,"load_gui_from_file","","Load the GUI from a TOML file",null,{"inputs":[{"name":"p"},{"name":"game"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_gui_from_str","","Load the GUI from a TOML str",null,{"inputs":[{"name":"str"},{"name":"game"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_backgrounds_from_file","","Load the backgrounds from a TOML file",null,{"inputs":[{"name":"p"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_backgrounds_from_str","","Load the backgrounds from a TOML str",null,{"inputs":[{"name":"str"},{"name":"gfxfactory"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_scripts_from_file","","Load the scripts from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["scriptsfromfile","scriptconfigimporterror"],"name":"result"}}],[5,"load_scripts_from_str","","Load the scripts from a TOML str",null,{"inputs":[{"name":"str"}],"output":{"generics":["scriptsfromfile","scriptconfigimporterror"],"name":"result"}}],[5,"load_music_from_file","","Load music from a TOML file",null,{"inputs":[{"name":"p"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[5,"load_music_from_str","","Load music from a TOML str",null,{"inputs":[{"name":"str"}],"output":{"generics":["hashmap","configimporterror"],"name":"result"}}],[11,"new","gobu","Create a new [`GameBuilder`] struct by providing the size of the window.",13,null],[11,"build","","Builds the [`Game`] or returns an error.",13,{"inputs":[{"name":"self"},{"name":"gfxfactory"}],"output":{"generics":["game","gamebuilderror"],"name":"result"}}],[11,"gui","","Create a GUI from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"characters","","Create Characters from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backgrounds","","Create Backgrounds from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"input","","Create Inputs from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"grid","","Create a Grid from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"scripts","","Load scripts from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"music","","Load music from either a path to an external file or a [`&str`].",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"from","gobu::util","",11,{"inputs":[{"name":"string"}],"output":{"name":"extfile"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"extfile"}}],[0,"input","gobu","The Piston events are taken and turned into [`GameEvent`]s",null,null],[3,"GameInput","gobu::input","The struct in charge of handling the input of the game.",null,null],[12,"continue_","","the buttons that continue the story of the game.",14,null],[4,"GameEvent","","Represents an Event that the game uses.",null,null],[13,"Continue","","Continue to the next step(s) of the story.",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new [`GameInput`] struct",14,{"inputs":[],"output":{"name":"self"}}],[11,"handle_event","","Handle a Piston Event and return a [`GameEvent`].",14,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"generics":["gameevent"],"name":"option"}}],[11,"add_continue_event","","Add an event that will continue the story.",14,{"inputs":[{"name":"self"},{"name":"button"}],"output":null}],[11,"add_continue_events","","Add events that will continue the story.",14,{"inputs":[{"name":"self"},{"generics":["button"],"name":"hashset"}],"output":null}],[11,"add_input","","Add input in the form of a [`GameInput`] struct. Just joins all of the data together.",14,{"inputs":[{"name":"self"},{"name":"gameinput"}],"output":null}],[0,"error","gobu","A collection of all the errors used in this crate.",null,null],[4,"ConfigImportError","gobu::error","An error created when an error occurs reading the TOML files.",null,null],[13,"Io","","Error caused by trying to opening the file.",16,null],[13,"Toml","","Error caused by reading the TOML file.",16,null],[4,"ScriptImportError","","An error created when an error occurs reading the script file.",null,null],[13,"Io","","Error caused by trying to opening the file.",17,null],[13,"Nom","","Error caused by trying to parse the script.",17,null],[4,"ScriptConfigImportError","","An error created when an error occurs reading the TOML files.",null,null],[13,"Io","","Error caused by trying to opening the file.",18,null],[13,"Nom","","Error caused by trying to parse the script.",18,null],[13,"Toml","","Error caused by reading the TOML file.",18,null],[4,"GameBuildError","","Error building the Game.",null,null],[13,"Gui","","Error importing the GUI file.",19,null],[13,"Backgrounds","","Error importing the Background file.",19,null],[13,"Characters","","Error importing the Character file.",19,null],[13,"Story","","Error importing the Scripts Config file.",19,null],[13,"Input","","Error importing the Input file.",19,null],[13,"Music","","Error importing the Music file.",19,null],[4,"MusicError","","An error caused by trying to play music.",null,null],[13,"NoDefaultOutputDeviceFound","","No default output device for playing music was found.",20,null],[13,"Decoder","","Error in decoding the music file.",20,null],[13,"Io","","Error finding and opening the file.",20,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"tomlerror"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"nomerr"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"configimporterror"}],"output":{"name":"scriptconfigimporterror"}}],[11,"from","","",18,{"inputs":[{"name":"scriptimporterror"}],"output":{"name":"scriptconfigimporterror"}}],[11,"from","","",18,{"inputs":[{"name":"tomlerror"}],"output":{"name":"scriptconfigimporterror"}}],[11,"from","","",18,{"inputs":[{"name":"ioerror"}],"output":{"name":"scriptconfigimporterror"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"scriptconfigimporterror"}],"output":{"name":"gamebuilderror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"decodererror"}],"output":{"name":"musicerror"}}],[11,"from","","",20,{"inputs":[{"name":"ioerror"}],"output":{"name":"musicerror"}}],[0,"music","gobu","The music that is stored and played by the game.",null,null],[3,"Music","gobu::music","The struct in charge of handling the music for the game.",null,null],[12,"sink","","The Rodio Sink that music can be played in.",21,null],[12,"library","","A collection of music data in bytes.",21,null],[12,"loop_","","Whether the music set will loop or not.",21,null],[11,"new","","Create a new [`Music`] struct. Returns an error if not possible.",21,{"inputs":[],"output":{"generics":["musicerror"],"name":"result"}}],[11,"set_music","","Sets the music that is to be played.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["musicerror"],"name":"result"}}],[11,"add_music_from_file","","Add music from a file.",21,{"inputs":[{"name":"self"},{"name":"s"},{"name":"p"}],"output":{"generics":["musicerror"],"name":"result"}}],[11,"add_music","","Add the buffered data of a music file.",21,{"inputs":[{"name":"self"},{"name":"string"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"set_loop","","If `True` will cause the music that is played to loop infinitely.",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"load_from_config_file","","Loads music from a TOML file.",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["configimporterror"],"name":"result"}}],[11,"load_from_config_str","","Loads music from a [`&str`] using TOML syntax.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configimporterror"],"name":"result"}}],[6,"Pos","gobu","Represents a position as a vector of [`f64`]s",null,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Game"],[3,"Grid"],[3,"Ui"],[3,"TextBox"],[4,"Padding"],[3,"TextBoxBuilder"],[3,"BackgroundImage"],[3,"CharacterEntity"],[3,"Character"],[3,"Script"],[4,"ScriptStep"],[4,"ExtFile"],[3,"ScriptsFromFile"],[3,"GameBuilder"],[3,"GameInput"],[4,"GameEvent"],[4,"ConfigImportError"],[4,"ScriptImportError"],[4,"ScriptConfigImportError"],[4,"GameBuildError"],[4,"MusicError"],[3,"Music"],[3,"Rect"]]};
initSearch(searchIndex);
