var N = null;var searchIndex = {};
searchIndex["x11_get_windows"]={"doc":"x11_get_windows is a Rust crate that makes it easier to query the x11 windowing sytsem to get the names of windows running on the computer.","items":[[3,"Atom","x11_get_windows","A wrapper around a [x11::xlib::Atom].",N,N],[12,"0","","",0,N],[3,"Display","","The Display Struct is just a wrapper of a [*mut Display] from XLib.",N,N],[3,"Session","","This is meant to be a struct that makes it easy to use this crate.",N,N],[12,"display","","A display that has been opened.",1,N],[12,"root_window","","The root window of the display.",1,N],[12,"client_list_atom","","The atom that represents the client_list property.",1,N],[12,"active_window_atom","","The atom that represents the active_window property.",1,N],[3,"Window","","This struct represents a window and holds the ID of that window that can be used to query for its name.",N,N],[12,"0","","",2,N],[3,"Windows","","A Collection of Windows.",N,N],[3,"Null","","A struct which is used to represent that an error occured due to a Null pointer.",N,N],[3,"NotSupported","","A struct that represents an error where the `_NET_ClIENT_LIST` property was not found in the root window.",N,N],[11,"new","","An export of [XInternAtom] that turns a CString into a Atom.",0,[[["display"],["t"]],["result",["nulerror"]]]],[11,"open","","Opens a connection to the x11 server.",3,[[],["result",["null"]]]],[11,"open","","Opens a display.",1,[[],["result",["null"]]]],[11,"from_display","","Creates a session from an already opened Display connection.",1,[[["display"]],["self"]]],[11,"get_windows","","Gets all the current windows on the screen.",1,[[["self"]],["result",["windows","notsupported"]]]],[11,"active_window","","Gets the currently active window in the display.",1,[[["self"]],["result",["window","notsupported"]]]],[11,"default_root_window","","Gets the default root window of a display.",2,[[["display"]],["self"]]],[11,"active_window","","Gets the current active window.",2,[[["session"]],["result",["notsupported"]]]],[11,"get_title","","Gets the title of the window.",2,[[["self"],["display"]],["result",["windowtitle","null"]]]],[11,"iter","","Exposes the iter function of the Vec so that you can use iterator methods on it.",4,[[["self"]],["iter",["window"]]]],[11,"inner","","Destroys the wrapper to give the inner vec.",4,[[["self"]],["vec",["window"]]]],[11,"as_vec","","Gives an immutable reference to the inner vec.",4,[[["self"]],["vec"]]],[11,"as_vec_mut","","Gives a mutable reference to the inner vec.",4,[[["self"]],["vec"]]],[0,"util","","Just some helpful functions if you require more functionality than this wrapper.",N,N],[3,"GetWindowPropertyResponse","x11_get_windows::util","A response to [get_window_property].",N,N],[12,"actual_type_return","","The type of the return.",5,N],[12,"actual_format_return","","The formate of the return whether it is 8, 16 or 32 bytes. If the architecture is 64-bits and the format is 32, then the return type wil be 64 bits.",5,N],[12,"nitems_return","","The number of items returned in the lsit.",5,N],[12,"bytes_after_return","","The number of bytes that are returned.",5,N],[12,"proper_return","","The pointer that is returned.",5,N],[5,"get_window_property","","An export of [XGetWindowProperty]. Make sure to [xlib::x11::XFree] the pointer, when you're done with it.",N,[[["display"],["window"],["atom"],["xatom"]],["result",["getwindowpropertyresponse","notsupported"]]]],[11,"into","x11_get_windows","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","x11_get_windows::util","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"drop","x11_get_windows","",3,[[["self"]]]],[11,"clone","","",0,[[["self"]],["atom"]]],[11,"clone","","",2,[[["self"]],["window"]]],[11,"clone","","",6,[[["self"]],["null"]]],[11,"clone","","",7,[[["self"]],["notsupported"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Atom"],[3,"Session"],[3,"Window"],[3,"Display"],[3,"Windows"],[3,"GetWindowPropertyResponse"],[3,"Null"],[3,"NotSupported"]]};
initSearch(searchIndex);
